apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  hostPath:
    path: /mnt/data
    type: DirectoryOrCreate

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  selector:
    matchLabels:
      app: mongodb
  serviceName: mongodb
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo
        ports:
        - containerPort: 27017
          name: mongodb

        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: root
          - name: MONGO_INITDB_ROOT_PASSWORD
            value: example

        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
        - name: mongo-init-db
          mountPath: /docker-entrypoint-initdb.d

      volumes:
      - name: mongo-persistent-storage
        persistentVolumeClaim:
          claimName: mongo-pvc

      - name: mongo-init-db
        configMap:
          name: mongo-init-cm

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-cm
data:
  init-mongo.js: |
    db = db.getSiblingDB("InfraOpsDB");
    db.createCollection("InfraOpsDBcollection");
    db.createUser({
      user: "root",
      pwd: "example",
      roles: [
        { role: "readWrite", db: "InfraOpsDB" },
        { role: "dbAdmin", db: "InfraOpsDB" }
      ]
    });
    print("Database, collection, and user initialized.");

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  clusterIP: None
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
      protocol: TCP